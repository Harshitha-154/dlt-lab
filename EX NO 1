def mcp_neuron(inputs, weights, threshold):
    summation = sum(i * w for i, w in zip(inputs, weights))
    return 1 if summation > threshold else 0

# AND Gate
def AND(x1, x2):
    return mcp_neuron([x1, x2], [1, 1], 1.5)

# OR Gate
def OR(x1, x2):
    return mcp_neuron([x1, x2], [1, 1], 0.5)

# NOT Gate
def NOT(x1):
    return mcp_neuron([x1], [-1], -0.5)

# NOR Gate
def NOR(x1, x2):
    return mcp_neuron([x1, x2], [-1, -1], -0.5)

# XOR Gate (hard-coded using logic: (A AND NOT B) OR (NOT A AND B))
def XOR(x1, x2):
    part1 = AND(x1, NOT(x2))
    part2 = AND(NOT(x1), x2)
    return OR(part1, part2)

# Testing
print("AND")
for x in [(0, 0), (0, 1), (1, 0), (1, 1)]:
    print(f"{x} -> {AND(*x)}")

print("\nOR")
for x in [(0, 0), (0, 1), (1, 0), (1, 1)]:
    print(f"{x} -> {OR(*x)}")

print("\nNOT")
for x in [0, 1]:
    print(f"{x} -> {NOT(x)}")

print("\nNOR")
for x in [(0, 0), (0, 1), (1, 0), (1, 1)]:
    print(f"{x} -> {NOR(*x)}")

print("\nXOR")
for x in [(0, 0), (0, 1), (1, 0), (1, 1)]:
    print(f"{x} -> {XOR(*x)}")
